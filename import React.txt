import React, { useState, useMemo } from "react";
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { PieChart, Pie, Cell, Legend, Tooltip, ResponsiveContainer } from "recharts";

const QUESTIONS = [
  {
    id: "horizon",
    title: "Investment Horizon",
    prompt: "How long before you expect to use most of this money?",
    options: [
      { label: "Under 3 years", value: 0 },
      { label: "3–7 years", value: 1 },
      { label: "7–15 years", value: 2 },
      { label: "15+ years", value: 3 }
    ]
  },
  {
    id: "drawdown",
    title: "Market Drops",
    prompt: "If your portfolio fell 15% in a few months, what would you do?",
    options: [
      { label: "Sell to avoid more losses", value: 0 },
      { label: "Do nothing and wait it out", value: 1 },
      { label: "Add a little more", value: 2 },
      { label: "Invest significantly more", value: 3 }
    ]
  },
  {
    id: "goal",
    title: "Primary Goal",
    prompt: "Which best describes your objective?",
    options: [
      { label: "Capital preservation", value: 0 },
      { label: "Income with some growth", value: 1 },
      { label: "Balanced growth & income", value: 2 },
      { label: "Maximum long-term growth", value: 3 }
    ]
  }
];

const PROFILES = [
  {
    key: "Conservative",
    thresholdMax: 3,
    blurb: "Low risk, focus on preservation.",
    allocation: { Equities: 20, Bonds: 50, Cash: 20, Alternatives: 10 }
  },
  {
    key: "Moderate",
    thresholdMax: 6,
    blurb: "Blend of stability and growth.",
    allocation: { Equities: 40, Bonds: 40, Cash: 10, Alternatives: 10 }
  },
  {
    key: "Balanced",
    thresholdMax: 8,
    blurb: "Even balance between risk and return.",
    allocation: { Equities: 55, Bonds: 30, Cash: 5, Alternatives: 10 }
  },
  {
    key: "Aggressive",
    thresholdMax: 12,
    blurb: "Higher risk, long-term growth focus.",
    allocation: { Equities: 75, Bonds: 15, Cash: 0, Alternatives: 10 }
  }
];

function getProfileFromScore(score) {
  return PROFILES.find((p) => score <= p.thresholdMax) || PROFILES[PROFILES.length - 1];
}

const PALETTE = ["#4f46e5", "#22c55e", "#f59e0b", "#06b6d4"];

function AllocationChart({ allocation }) {
  const data = Object.entries(allocation).map(([name, value]) => ({ name, value }));
  return (
    <div className="h-64 w-full">
      <ResponsiveContainer width="100%" height="100%">
        <PieChart>
          <Pie
            data={data}
            dataKey="value"
            nameKey="name"
            outerRadius={100}
            label
          >
            {data.map((entry, index) => (
              <Cell key={`cell-${index}`} fill={PALETTE[index % PALETTE.length]} />
            ))}
          </Pie>
          <Tooltip />
          <Legend verticalAlign="bottom" height={36} />
        </PieChart>
      </ResponsiveContainer>
    </div>
  );
}

export default function JointRiskProfiler() {
  const [answersClient, setAnswersClient] = useState({});
  const [answersPartner, setAnswersPartner] = useState({});
  const [step, setStep] = useState(0);

  const total = QUESTIONS.length;
  const current = QUESTIONS[step];

  const scoreClient = useMemo(
    () => Object.values(answersClient).reduce((a, v) => a + v, 0),
    [answersClient]
  );
  const scorePartner = useMemo(
    () => Object.values(answersPartner).reduce((a, v) => a + v, 0),
    [answersPartner]
  );

  const combinedScore = Math.round((scoreClient + scorePartner) / 2);

  const profileClient = getProfileFromScore(scoreClient);
  const profilePartner = getProfileFromScore(scorePartner);
  const profileCombined = getProfileFromScore(combinedScore);

  const progress = Math.round(((step + 1) / total) * 100);

  function reset() {
    setAnswersClient({});
    setAnswersPartner({});
    setStep(0);
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-white to-slate-50 p-6 text-slate-800">
      <Card className="max-w-3xl mx-auto shadow-lg rounded-2xl">
        <CardHeader>
          <CardTitle className="text-xl">Joint Investment Risk Profiler</CardTitle>
          <Progress value={progress} className="mt-2" />
        </CardHeader>
        <CardContent>
          {current ? (
            <>
              <h2 className="text-lg font-semibold">{current.title}</h2>
              <p className="text-slate-600 mb-4">{current.prompt}</p>

              <div className="mb-6">
                <h3 className="font-medium mb-2">Client</h3>
                {current.options.map((opt) => (
                  <Button
                    key={opt.label}
                    variant={
                      answersClient[current.id] === opt.value ? "default" : "outline"
                    }
                    className="m-1"
                    onClick={() =>
                      setAnswersClient({ ...answersClient, [current.id]: opt.value })
                    }
                  >
                    {opt.label}
                  </Button>
                ))}
              </div>

              <div>
                <h3 className="font-medium mb-2">Partner</h3>
                {current.options.map((opt) => (
                  <Button
                    key={opt.label}
                    variant={
                      answersPartner[current.id] === opt.value ? "default" : "outline"
                    }
                    className="m-1"
                    onClick={() =>
                      setAnswersPartner({ ...answersPartner, [current.id]: opt.value })
                    }
                  >
                    {opt.label}
                  </Button>
                ))}
              </div>
            </>
          ) : (
            <div className="space-y-6">
              <h2 className="text-lg font-semibold">Results</h2>

              <div>
                <p className="font-medium">Client: {profileClient.key}</p>
                <p className="text-sm text-slate-600">{profileClient.blurb}</p>
                <AllocationChart allocation={profileClient.allocation} />
              </div>

              <div>
                <p className="font-medium">Partner: {profilePartner.key}</p>
                <p className="text-sm text-slate-600">{profilePartner.blurb}</p>
                <AllocationChart allocation={profilePartner.allocation} />
              </div>

              <div>
                <p className="font-medium">Combined: {profileCombined.key}</p>
                <p className="text-sm text-slate-600">{profileCombined.blurb}</p>
                <AllocationChart allocation={profileCombined.allocation} />
              </div>
            </div>
          )}
        </CardContent>
        <CardFooter className="flex justify-between">
          <Button
            variant="outline"
            onClick={() => setStep(Math.max(0, step - 1))}
            disabled={step === 0}
          >
            Back
          </Button>
          {step < total - 1 ? (
            <Button
              onClick={() => setStep(step + 1)}
              disabled={
                typeof answersClient[current.id] !== "number" ||
                typeof answersPartner[current.id] !== "number"
              }
            >
              Next
            </Button>
          ) : current ? (
            <Button
              onClick={() => setStep(step + 1)}
              disabled={
                typeof answersClient[current.id] !== "number" ||
                typeof answersPartner[current.id] !== "number"
              }
            >
              Finish
            </Button>
          ) : (
            <Button variant="outline" onClick={reset}>
              Restart
            </Button>
          )}
        </CardFooter>
      </Card>
    </div>
  );
}
